#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app     = require('../app');
var debug   = require('debug')('dmsapp:server');
const http  = require('http');
const https = require('https');
const fs    = require('fs');
var path    = require('path');
var config  = require('../config');
var commons = require('../lib');

/**
 * Get port from environment and store in Express.
 */

var port = commons.normalizePort(process.env.HTTP_PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onErrorHttp);
server.on('listening', onListeningHttp);

function onErrorHttp(error) {
  onError(error, port);
}

function onListeningHttp() {
  onListening(server);
}

/*
 * If enabled, set up HTTPS server.
 */

var useHttps = config.httpsEnabled;
var privateKeyPath = process.env.SSL_PRIVATE_KEY_PATH || "";
var certificatePath = process.env.SSL_CERTIFICATE_PATH || "";
var caPath = process.env.SSL_CHAIN_PATH || "";
privateKeyPath = privateKeyPath.trim();
certificatePath = certificatePath.trim();
caPath = caPath.trim();
if (useHttps && privateKeyPath && certificatePath && caPath) {
  // Certificates for secure connection.
  const privateKey  = fs.readFileSync(path.resolve(privateKeyPath), 'utf8');
  const certificate = fs.readFileSync(path.resolve(certificatePath), 'utf8');
  const ca = fs.readFileSync(path.resolve(caPath), 'utf8');
  const credentials = {
    key: privateKey,
    cert: certificate,
    ca: ca
  };

  var httpsPort = commons.normalizePort(process.env.HTTPS_PORT || '3443');
  app.set('https-port', httpsPort);
  const httpsServer = https.createServer(credentials, app);

  httpsServer.listen(httpsPort);
  httpsServer.on('error', onErrorHttps);
  httpsServer.on('listening', onListeningHttps);

  function onErrorHttps(error) {
    onError(error, httpsPort);
  }

  function onListeningHttps() {
    onListening(httpsServer);
  }
}

/**
 * Event listener for server "error" event.
 */

function onError(error, port) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for server "listening" event.
 */

function onListening(server) {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}